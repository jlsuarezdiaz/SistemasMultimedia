/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint2d;

import com.github.sarxos.webcam.Webcam;
import java.awt.image.BufferedImage;
import sm.jlsd.ui.Canvas2D;
import sm.jlsd.ui.Canvas2DImage;

/**
 * Class MediaWindowAdapter.
 * An abstract JInternalFrame that defines the functionality for every media window.
 * @author jlsuarezdiaz
 */
public abstract class MediaWindowAdapter extends javax.swing.JInternalFrame {
    
    protected MainView parent = null;

    /**
     * Creates new form MediaWindow
     */
    public MediaWindowAdapter() {
        initComponents();
    }
    
    /**
     * Sets the parent view.
     * @param p The parent MainView.
     */
    public void setParent(MainView p){
        this.parent = p;
    }
    
    /**
     * @return A reference to the internal canvas, if it exists.
     */
    public Canvas2DImage getCanvas(){
        return null;
    }
    
    /**
     * Obtains the current image.
     * @return Current image, if it exists.
     */
    public BufferedImage getImage(){
        return null;
    }
    
    /**
     * Obtains the current image. It allows to add the shapes vector to the returning image.
     * @param drawVector Boolean indicating whether drawing the shapes vector on the returning image.
     * @return Current image, if it exists.
     */
    public BufferedImage getImage(boolean drawVector){
        return null;
    }
    
    /**
     * Obtains the image title of the image.
     * @return Image title, if it exists.
     */
    public String getImageTitle(){
        return null;
    }
    
    /**
     * Obtains a string with additional image information that is displayed in the title.
     * @return Image information, if it exists.
     */
    public String getImageInfo(){
        return null;
    }
    
    /**
     * Obtains the camera.
     * @return Camera, if it exists.
     */
    public Webcam getCamera(){
        return null;
    }
    
    /**
     * Makes a snapshot.
     * @return BufferedImage for a snapshot, it if exists.
     */
    public BufferedImage getSnapShot(){
        return null;
    }
    
    /**
     * Starts playing, if allowed.
     */
    public void play(){}
    
    /**
     * Pauses the media, if allowed.
     */
    public void pause(){}
    
    /**
     * Switches between play and pause, if allowed.
     */
    public void playPause(){}
    
    /**
     * Stops the media, if allowed.
     */
    public void stop(){}
    
    /**
     * Seeks the media, if allowed.
     * @param position Relative position, from 0.0 to 1.0.
     */
    public void seek(float position){}
    
    /**
     * Checks if media is playing, if allowed.
     * @return True if media is allowed and playing, false otherwise.
     */
    public boolean isPlaying(){
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
