
package paint2d;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import sm.jlsd.ui.Canvas2D;
import sm.jlsd.ui.Canvas2DImage;

/**
 * Class InternalWindow.
 * A window to hold the canvas.
 * @author jlsuarezdiaz
 */
public class ImageWindow extends MediaWindowAdapter {
    /**
     * Image title.
     */
    private String imageTitle = "";
    
    /**
     * Image additional information.
     */
    private String imageInfo = "";

    /**
     * Creates new form InternalWindow
     */
    public ImageWindow() {
        initComponents();
    }
    
    /**
     * Creates new form InternalWindow
     */
    public ImageWindow(MainView parent) {
        initComponents();
        setParent(parent);
    
    }
    
    
    /**
     * @return A reference to the internal canvas. 
     */
    @Override
    public Canvas2DImage getCanvas(){
        return this.canvas;
    }

    /**
     * Obtains the current image.
     * @return Canvas image.
     */
    @Override
    public BufferedImage getImage() {
        return getCanvas().getImage();
    }
    

    /**
     * Obtains the current image. It allows to add the shapes vector to the returning image.
     * @param drawVector
     * @return Boolean indicating whether drawing the shapes vector on the returning image.
     */
    @Override
    public BufferedImage getImage(boolean drawVector) {
        return getCanvas().getImage(drawVector);
    }
    
    /**
     * Sets the title of the image. This function also updates the title with the given image title.
     * @param str String with the image title.
     */
    public void setImageTitle(String str){
        this.imageTitle = str;
        updateTitle();
    }
    
    /**
     * Sets additional information of the image, that will be displayed in the title together with the image title.
     * @param str String with image information.
     */
    public void setImageInfo(String str){
        this.imageInfo = str;
        updateTitle();
    }
    
    /**
     * Obtains the image title.
     * @return Image title.
     */
    @Override
    public String getImageTitle(){
        return this.imageTitle;
    }
    
    /**
     * Obtains the image information.
     * @return Image information-
     */
    @Override
    public String getImageInfo(){
        return this.imageInfo;
    }
    
    /**
     * Updates the title according to the values of the image title and the image info.
     */
    private void updateTitle(){
        String title = "";
        if(this.imageTitle != null) title += imageTitle;
        if(this.imageInfo != null) title += " "+ imageInfo;
        super.setTitle(title);
    }
    
    

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasScroll = new javax.swing.JScrollPane();
        canvas = new sm.jlsd.ui.Canvas2DImage();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nuevo lienzo");
        setPreferredSize(new java.awt.Dimension(540, 550));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                canvasMouseExited(evt);
            }
        });
        canvas.setLayout(null);
        canvasScroll.setViewportView(canvas);

        getContentPane().add(canvasScroll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Internal frame activated event handler.
     * @param evt  InternalFrameEvent.
     */
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        if(parent != null){
            parent.setImageView(canvas);
            parent.setPaintToolStateBar(canvas.getCurrentTool());
            if(canvas.isEditing()) parent.setPaintToolStateBar(null);
            parent.setPointsStateBar(null,null);
        }
    }//GEN-LAST:event_formInternalFrameActivated

    /**
     * Canvas mouse moved event handler.
     * @param evt MouseEvent.
     */
    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        Point p = evt.getPoint();
        parent.setPointsStateBar(p, null);
        BufferedImage img = canvas.getImage();
        if(img != null && p.x < img.getWidth() && p.y < img.getHeight()){
            parent.setColorStateBar(img.getRGB(p.x, p.y));
        }
        else{
            parent.setColorStateBar(null);
        }
    }//GEN-LAST:event_canvasMouseMoved

    /**
     * Canvas mouse dragged event handler.
     * @param evt MouseEvent.
     */
    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        parent.setPointsStateBar(canvas.getP0(), canvas.getP1());
    }//GEN-LAST:event_canvasMouseDragged

    /**
     * Canvas mouse exited event handler.
     * @param evt MouseEvent.
     */
    private void canvasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseExited
        parent.setPointsStateBar(null, null);
        parent.setColorStateBar(null);
    }//GEN-LAST:event_canvasMouseExited

    /**
     * Canvas mouse exited event handler.
     * @param evt MouseEvent.
     */
    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        parent.setImageView(canvas);
    }//GEN-LAST:event_canvasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sm.jlsd.ui.Canvas2DImage canvas;
    private javax.swing.JScrollPane canvasScroll;
    // End of variables declaration//GEN-END:variables
}
