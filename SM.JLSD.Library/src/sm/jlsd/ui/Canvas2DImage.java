
package sm.jlsd.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import javax.swing.UIManager;
import sm.jlsd.graphics.JRectangle;
import sm.jlsd.graphics.JShape;

/**
 * Class Canvas2DImage.
 * A Canvas2D that allows BufferedImage manipulations.
 * @author jlsuarezdiaz
 */
public class Canvas2DImage extends Canvas2D{
    /**
     * BufferedImage.
     */
    private BufferedImage image = null;
    
    /**
     * Creates new form Canvas2DImage
     */
    public Canvas2DImage() {
        initComponents();
        setFocusable(true);
    }
    
    /**
     * Sets a new image.
     * @param img BufferedImage to set.
     */
    public void setImage(BufferedImage img){
        this.image = img;
        if(image != null){
            setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
            clipArea = new JRectangle(0,0,img.getWidth(), img.getHeight());
        }
    }
    
    /**
     * Obtains the current image.
     * @return Canvas image.
     */
    public BufferedImage getImage(){
       return getImage(false);
    }
    
    /**
     * Obtains the current image. It allows to add the shapes vector to the returning image.
     * @param drawVector Boolean indicating whether drawing the shapes vector on the returning image.
     * @return Canvas image, with the shapes, if specified.
     */
    public BufferedImage getImage(boolean drawVector){
        setFrontierDraw(false);
        BufferedImage imgOut;
        if(drawVector){
            imgOut = new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            this.paint(imgOut.createGraphics());
            return imgOut;
        }
        else{
            imgOut = this.image;
        }
        setFrontierDraw(true);
        return imgOut;
    }
    
    /**
     * Paints the canvas, adding the current image.
     * @param g Graphics object to be painted.
     */
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        
        if(image != null){
            g.drawImage(image,0,0,this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(UIManager.getColor ( "Panel.background" ));
        setOpaque(false);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
