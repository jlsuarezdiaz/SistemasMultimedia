
package sm.jlsd.ui;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JSlider;

/**
 * Class ClipSlider.
 * A jSlider for audio and video playing.
 * @author jlsuarezdiaz
 */
public class ClipSlider extends javax.swing.JPanel {
    /**
     * Time format, including hours.
     */
    private static final DateFormat df_extended = new SimpleDateFormat("HH:mm:ss");
    
    /**
     * Time format, only minutes and seconds.
     */
    private static final DateFormat df = new SimpleDateFormat("mm:ss");
    static {
        df_extended.setTimeZone(TimeZone.getTimeZone("GMT"));
        df.setTimeZone(TimeZone.getTimeZone("GMT"));
    }
    
    /**
     * Current date format.
     */
    private DateFormat current_df = df;
    
    /**
     * Current time of the media.
     */
    private long current = 0;
    
    /**
     * Duration of the media.
     */
    private long duration = 0;
    
    /**
     * Interacting flag. Prevents firing some events.
     */
    private boolean interacting = false;

    /**
     * Creates new form ClipSlider
     */
    public ClipSlider() {
        initComponents();
    }
    
    /**
     * Obtains the internal jSlider
     * @return the internal jSlider.
     */
    public JSlider getSlider(){
        return slider;
    }
    
    /**
     * Sets the current time for the slider.
     * @param miliseconds Time, in miliseconds.
     */
    public void setCurrentTime(long miliseconds){
        this.current = miliseconds;
        if(!interacting) slider.setValue((int)this.current);
    }
    
    /**
     * Sets the current time for the slider, given as a proportion.
     * @param frac Relative time. A value from 0.0 to 1.0 indicating the fraction of time played.
     */
    public void setRelativeTime(float frac){
        setCurrentTime((long) (frac*getDurationTime()));
    }
    
    /**
     * Sets the duration time.
     * @param miliseconds Time, in miliseconds.
     */
    public void setDurationTime(long miliseconds){
        this.duration = miliseconds;
        if(miliseconds > 3600000) current_df = df_extended;
        else current_df = df;
        durationLabel.setText(current_df.format(new Date(this.duration)));
        slider.setMaximum((int)this.duration);
    }
    
    /**
     * Obtains the current time.
     * @return Current time, in miliseconds.
     */
    public long getCurrentTime(){
        return current;
    }
    
    /**
     * Obtains the duration time.
     * @return Duration time, in miliseconds.
     */
    public long getDurationTime(){
        return duration;
    }
    
    /**
     * Obtains the relative played time.
     * @return Relative time. A value from 0.0 to 1.0 indicating the fraction of time played.
     */
    public float getRelativeTime(){
        return (float)current/duration;
    }
    
    /**
     * Obtains the changed time value setted in the slider.
     * This value may have been changed by a user event, so not necessarily coincides with the current time.
     * @return Slider current value.
     */
    public long getChange(){
        return slider.getValue();
    }
    
    /**
     * Obtains the changed relative time setted in the slider.
     * This value may have been changed by a user event, so not necessarily coincides with the current relative time.
     * @return Relative value of the slider. A value from 0.0 to 1.0 indicating its relative position.
     */
    public float getRelativeChange(){
        return (float)slider.getValue()/duration;
    }
    
    /**
     * Adds a mouse listener to the slider.
     * @param ml MouseListener.
     */
    public void addSlideMouseListener(MouseListener ml){
        this.slider.addMouseListener(ml);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();

        setLayout(new java.awt.BorderLayout());

        currentLabel.setText("00:00");
        currentLabel.setToolTipText("Tiempo de reproducción");
        add(currentLabel, java.awt.BorderLayout.LINE_START);

        durationLabel.setText("00:00");
        durationLabel.setToolTipText("Duración");
        add(durationLabel, java.awt.BorderLayout.LINE_END);

        slider.setMaximum(0);
        slider.setToolTipText("Barra de reproducción");
        slider.setPreferredSize(new java.awt.Dimension(150, 16));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderMouseReleased(evt);
            }
        });
        add(slider, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * State change event for the slider. Updates the current time and duration labels.
     * @param evt ChangeEvent.
     */
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        currentLabel.setText(current_df.format(new Date(this.slider.getValue())));
    }//GEN-LAST:event_sliderStateChanged

    /**
     * Mouse pressed event for the slider. Activates interacting flag.
     * @param evt MouseEvent.
     */
    private void sliderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMousePressed
        interacting=true;
    }//GEN-LAST:event_sliderMousePressed

    /**
     * Mouse released event for the slider. Deactivates interacting flag.
     * @param evt MouseEvent.
     */
    private void sliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseReleased
        interacting=false;
    }//GEN-LAST:event_sliderMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentLabel;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables
}
